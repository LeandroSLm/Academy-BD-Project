-- MySQL Script generated by MySQL Workbench
-- Sat Sep  7 21:21:15 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering


-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS mydb;
SET search_path TO mydb;


-- -----------------------------------------------------
-- Table `mydb`.`academia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS mydb.academia (
  codigo_unidade INTEGER NOT NULL,
  telefone JSONB NOT NULL,
  rua VARCHAR(50) NOT NULL,
  cep VARCHAR(8) NOT NULL,
  numero VARCHAR(4) NOT NULL,
  nome VARCHAR(100) NOT NULL,
  horario_abertura TIME NOT NULL,
  horario_fechamento TIME NOT NULL,
  PRIMARY KEY (codigo_unidade)
);



-- -----------------------------------------------------
-- Table `mydb`.`usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS mydb.usuario (
  cpf VARCHAR(11) NOT NULL,
  cep VARCHAR(8),
  numero_casa VARCHAR(4),
  rua VARCHAR(100),
  usuario VARCHAR(50) NOT NULL,
  palavra_forte VARCHAR(50) NOT NULL,
  primeiro_nome VARCHAR(100) NOT NULL,
  sobrenome VARCHAR(100) NOT NULL,
  data_nascimento DATE NOT NULL,
  telefone JSONB NOT NULL,
  academia_codigo_unidade INTEGER NOT NULL,
  PRIMARY KEY (cpf),
  UNIQUE (usuario),
  FOREIGN KEY (academia_codigo_unidade)
    REFERENCES mydb.academia (codigo_unidade)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- Criar o índice separado
CREATE INDEX fk_usuario_academia_idx ON mydb.usuario (academia_codigo_unidade);




-- -----------------------------------------------------
-- Table `mydb`.`aluno`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS mydb.aluno (
  matricula INTEGER NOT NULL,
  numero_sessoes INTEGER NOT NULL,
  data_matricula DATE NOT NULL,
  altura FLOAT NOT NULL,
  peso FLOAT NOT NULL,
  observacoes VARCHAR(500),
  usuario_cpf VARCHAR(11) NOT NULL,
  PRIMARY KEY (matricula),
  FOREIGN KEY (usuario_cpf)
    REFERENCES mydb.usuario (cpf)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- Criar o índice separado
CREATE INDEX fk_aluno_usuario1_idx ON mydb.aluno (usuario_cpf);



-- -----------------------------------------------------
-- Table `mydb`.`funcionario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS mydb.funcionario (
  NIT INTEGER NOT NULL UNIQUE,
  salario FLOAT NOT NULL CHECK (salario > 1412),
  data_admissao DATE NOT NULL,
  cargo SMALLINT NOT NULL, -- TINYINT em MySQL é equivalente a SMALLINT em PostgreSQL
  hora_entrada TIME NOT NULL,
  hora_saida TIME NOT NULL,
  usuario_cpf VARCHAR(11) NOT NULL,
  PRIMARY KEY (NIT),
  FOREIGN KEY (usuario_cpf)
    REFERENCES mydb.usuario (cpf)
    ON DELETE CASCADE
    ON UPDATE NO ACTION
);

-- Criar o índice separado
CREATE INDEX fk_funcionario_usuario1_idx ON mydb.funcionario (usuario_cpf);

CREATE TABLE IF NOT EXISTS mydb.plano (
  codigo INTEGER NOT NULL,
  descricao VARCHAR(200),
  nome VARCHAR(100) NOT NULL,
  valor FLOAT NOT NULL,
  num_max_participantes SMALLINT NOT NULL, -- TINYINT em MySQL é equivalente a SMALLINT em PostgreSQL
  PRIMARY KEY (codigo)
);


-- -----------------------------------------------------
-- Table `mydb`.`visitante`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS mydb.visitante (
  cpf VARCHAR(11) NOT NULL,
  nome VARCHAR(100) NOT NULL,
  data_visita DATE NOT NULL,
  telefone VARCHAR(11) NOT NULL,
  visitas SMALLINT NOT NULL, -- TINYINT em MySQL é equivalente a SMALLINT em PostgreSQL
  aluno_matricula INTEGER, -- INT em MySQL é equivalente a INTEGER em PostgreSQL
  PRIMARY KEY (cpf),
  FOREIGN KEY (aluno_matricula)
    REFERENCES mydb.aluno (matricula)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- Criar o índice separado
CREATE INDEX fk_visitante_aluno1_idx ON mydb.visitante (aluno_matricula);



-- -----------------------------------------------------
-- Table `mydb`.`instrutor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS mydb.instrutor (
  grau_academico JSONB NOT NULL, -- JSON em MySQL é equivalente a JSONB em PostgreSQL para melhor desempenho
  funcionario_NIT INTEGER NOT NULL, -- INT em MySQL é equivalente a INTEGER em PostgreSQL
  PRIMARY KEY (funcionario_NIT),
  FOREIGN KEY (funcionario_NIT)
    REFERENCES mydb.funcionario (NIT)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- Criar o índice separado
CREATE INDEX fk_instrutor_funcionario1_idx ON mydb.instrutor (funcionario_NIT);

-- -----------------------------------------------------
-- Table `mydb`.`tecnico_manutencao`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS mydb.tecnico_manutencao (
  especialidade VARCHAR(100) NOT NULL,
  funcionario_NIT INTEGER NOT NULL, -- INT em MySQL é equivalente a INTEGER em PostgreSQL
  PRIMARY KEY (funcionario_NIT),
  FOREIGN KEY (funcionario_NIT)
    REFERENCES mydb.funcionario (NIT)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- Criar o índice separado
CREATE INDEX fk_tecnico_manutencao_funcionario1_idx ON mydb.tecnico_manutencao (funcionario_NIT);



-- -----------------------------------------------------
-- Table `mydb`.`supervisor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS mydb.supervisor (
  funcionario_NIT INTEGER NOT NULL,
  academia_codigo_unidade INTEGER NOT NULL,
  PRIMARY KEY (funcionario_NIT),
  FOREIGN KEY (funcionario_NIT)
    REFERENCES mydb.funcionario (NIT)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  FOREIGN KEY (academia_codigo_unidade)
    REFERENCES mydb.academia (codigo_unidade)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- Criar os índices separados
CREATE INDEX fk_supervisor_funcionario1_idx ON mydb.supervisor (funcionario_NIT);
CREATE INDEX fk_supervisor_academia1_idx ON mydb.supervisor (academia_codigo_unidade);


-- -----------------------------------------------------
-- Table `mydb`.`aparelho`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS mydb.aparelho (
  modelo VARCHAR(50) NOT NULL,
  nome VARCHAR(100) NOT NULL,
  tipo SMALLINT NOT NULL, -- TINYINT não existe em PostgreSQL; SMALLINT é geralmente o substituto
  PRIMARY KEY (modelo)
);

CREATE TABLE IF NOT EXISTS mydb.unidade (
  numero_exemplar INTEGER NOT NULL,
  fornecedor VARCHAR(100),
  status SMALLINT NOT NULL, -- TINYINT não existe em PostgreSQL; SMALLINT é geralmente o substituto
  aparelho_modelo VARCHAR(50) NOT NULL,
  academia_codigo_unidade INTEGER NOT NULL,
  PRIMARY KEY (numero_exemplar, aparelho_modelo),
  FOREIGN KEY (aparelho_modelo)
    REFERENCES mydb.aparelho (modelo)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  FOREIGN KEY (academia_codigo_unidade)
    REFERENCES mydb.academia (codigo_unidade)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- Criar os índices separados
CREATE INDEX fk_unidade_aparelho1_idx ON mydb.unidade (aparelho_modelo);
CREATE INDEX fk_unidade_academia1_idx ON mydb.unidade (academia_codigo_unidade);

ALTER TABLE mydb.unidade ADD CONSTRAINT unique_numero_exemplar UNIQUE (numero_exemplar);

-- -----------------------------------------------------
-- Table `mydb`.`manutencao`
-- -----------------------------------------------------
CREATE DOMAIN tipo_manutencao AS SMALLINT
CHECK (VALUE IN (1, 2, 3));


CREATE TABLE IF NOT EXISTS mydb.manutencao (
  data_agendamento DATE NOT NULL,
  data_realizacao DATE NOT NULL,
  tipo tipo_manutencao NOT NULL,  -- Usando o domínio aqui
  descricao VARCHAR(200),
  tecnico_manutencao_funcionario_NIT INTEGER NOT NULL,
  supervisor_funcionario_NIT INTEGER NOT NULL,
  unidade_numero_exemplar INTEGER NOT NULL,
  PRIMARY KEY (unidade_numero_exemplar),
  FOREIGN KEY (tecnico_manutencao_funcionario_NIT)
    REFERENCES mydb.tecnico_manutencao (funcionario_NIT)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  FOREIGN KEY (supervisor_funcionario_NIT)
    REFERENCES mydb.supervisor (funcionario_NIT)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  FOREIGN KEY (unidade_numero_exemplar)
    REFERENCES mydb.unidade (numero_exemplar)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

CREATE TABLE IF NOT EXISTS mydb.exercicio (
  nome INTEGER NOT NULL,
  musculo VARCHAR(100) NOT NULL,
  series SMALLINT NOT NULL, -- TINYINT não existe em PostgreSQL; SMALLINT é geralmente o substituto
  repeticoes SMALLINT NOT NULL, -- TINYINT não existe em PostgreSQL; SMALLINT é geralmente o substituto
  aparelho_modelo VARCHAR(50) NOT NULL,
  id INTEGER NOT NULL,
  PRIMARY KEY (id),
  FOREIGN KEY (aparelho_modelo)
    REFERENCES mydb.aparelho (modelo)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- Criar os índices separados
CREATE INDEX fk_manutencao_tecnico_manutencao1_idx ON mydb.manutencao (tecnico_manutencao_funcionario_NIT);
CREATE INDEX fk_manutencao_supervisor1_idx ON mydb.manutencao (supervisor_funcionario_NIT);
CREATE INDEX fk_manutencao_unidade1_idx ON mydb.manutencao (unidade_numero_exemplar);

CREATE INDEX fk_exercicio_aparelho1_idx ON mydb.exercicio (aparelho_modelo);



-- -----------------------------------------------------
-- Table `mydb`.`ficha_treino`
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Table mydb.ficha_treino
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS mydb.ficha_treino (
  tipo SMALLINT NOT NULL,
  objetivo VARCHAR(100) NOT NULL DEFAULT 'Ganhar Massa',
  id SERIAL PRIMARY KEY
);

-- -----------------------------------------------------
-- Table mydb.sessao
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS mydb.sessao (
  data DATE NOT NULL,
  turno SMALLINT,
  id SERIAL PRIMARY KEY,
  ficha_treino_id INTEGER NOT NULL,
  FOREIGN KEY (ficha_treino_id)
    REFERENCES mydb.ficha_treino (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);



-- -----------------------------------------------------
-- Table `mydb`.`exercicio_em_ficha_de_treino`
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Table mydb.exercicio_em_ficha_de_treino
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS mydb.exercicio_em_ficha_de_treino (
  ordem_execucao INTEGER NOT NULL,
  exercicio_codigo INTEGER NOT NULL, -- Alterado para INTEGER para corresponder à tabela exercício
  ficha_treino_id INTEGER NOT NULL,
  PRIMARY KEY (exercicio_codigo, ficha_treino_id),
  FOREIGN KEY (exercicio_codigo)
    REFERENCES mydb.exercicio (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  FOREIGN KEY (ficha_treino_id)
    REFERENCES mydb.ficha_treino (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- -----------------------------------------------------
-- Table mydb.aluno_acompanha_ficha_treino
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS mydb.aluno_acompanha_ficha_treino (
  data DATE NOT NULL,
  aluno_matricula INTEGER NOT NULL,
  ficha_treino_id INTEGER NOT NULL,
  PRIMARY KEY (aluno_matricula, ficha_treino_id),
  FOREIGN KEY (aluno_matricula)
    REFERENCES mydb.aluno (matricula)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  FOREIGN KEY (ficha_treino_id)
    REFERENCES mydb.ficha_treino (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);


-- -----------------------------------------------------
-- Table `mydb`.`produto`
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Table mydb.produto
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Table mydb.produto
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS mydb.produto (
  codigo INTEGER NOT NULL,
  nome VARCHAR(100) NOT NULL,
  descricao VARCHAR(500) NULL,
  quantidade INTEGER NOT NULL,
  preco_unitario FLOAT NOT NULL,
  academia_codigo_unidade INTEGER NOT NULL,
  PRIMARY KEY (codigo),
  FOREIGN KEY (academia_codigo_unidade)
    REFERENCES mydb.academia (codigo_unidade)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- -----------------------------------------------------
-- Table mydb.aluno_compra_produto
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS mydb.aluno_compra_produto (
  data DATE NOT NULL,
  status_pagamento SMALLINT NOT NULL, -- Alterado para SMALLINT para corresponder ao TINYINT
  aluno_matricula INTEGER NOT NULL,
  produto_codigo INTEGER NOT NULL,
  PRIMARY KEY (aluno_matricula, produto_codigo),
  FOREIGN KEY (aluno_matricula)
    REFERENCES mydb.aluno (matricula)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  FOREIGN KEY (produto_codigo)
    REFERENCES mydb.produto (codigo)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);


-- -----------------------------------------------------
-- Table `mydb`.`instrutor_atua_sessao`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS mydb.instrutor_atua_sessao (
  horario TIME NOT NULL,
  instrutor_funcionario_NIT INT NOT NULL,
  sessao_id INT NOT NULL,
  PRIMARY KEY (instrutor_funcionario_NIT, sessao_id),
  FOREIGN KEY (instrutor_funcionario_NIT)
    REFERENCES mydb.instrutor (funcionario_NIT)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  FOREIGN KEY (sessao_id)
    REFERENCES mydb.sessao (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);



-- -----------------------------------------------------
-- Table `mydb`.`aluno_tem_planos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS mydb.aluno_tem_planos (
  plano_codigo INT NOT NULL,
  aluno_matricula INT NOT NULL,
  status SMALLINT NOT NULL,  -- `TINYINT` no MySQL corresponde a `SMALLINT` no PostgreSQL
  ultimo_pagamento DATE NOT NULL,
  data_de_inicio DATE NOT NULL,
  data_de_fim DATE,
  PRIMARY KEY (plano_codigo, aluno_matricula),
  FOREIGN KEY (plano_codigo)
    REFERENCES mydb.plano (codigo)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  FOREIGN KEY (aluno_matricula)
    REFERENCES mydb.aluno (matricula)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);



--SET SQL_MODE=@OLD_SQL_MODE;
--SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
--SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
